generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  accounts        Account[]
  Authenticator   Authenticator[]
  PlayerCharacter PlayerCharacter[]
  sessions        Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Ability {
  id                          String                        @id @db.Uuid
  name                        String?                       @db.VarChar
  PlayerCharacterAbilityScore PlayerCharacterAbilityScore[]
  Skill                       Skill[]
}

model Armor {
  id            String          @id @db.Uuid
  name          String?         @db.VarChar
  description   String?
  modifier      Int?
  magic_item_id String?         @unique @db.Uuid
  ArmorProperty ArmorProperty[]
  MagicItem     MagicItem?
}

model ArmorProperty {
  id       String  @id @db.Uuid
  Armor_id String? @db.Uuid
  value    String? @db.VarChar
  Armor    Armor?  @relation(fields: [Armor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model AttunedItems {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  item_id             String?          @db.Uuid
  item_type           String?          @db.VarChar
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Background {
  id                        String                      @id @db.Uuid
  name                      String?                     @db.VarChar
  description               String?
  BackgroundFeature         BackgroundFeature[]
  PlayerCharacterBackground PlayerCharacterBackground[]
}

model BackgroundFeature {
  id             String      @id @db.Uuid
  name           String?     @unique @db.VarChar
  level          Int?
  background_id  String?     @db.Uuid
  type           String?     @db.VarChar
  description    String?
  max_uses       Int?
  refresh_period String?     @db.VarChar
  Background     Background? @relation(fields: [background_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Class {
  id                   String                 @id @db.Uuid
  name                 String?                @unique @db.VarChar
  slug                 String?                @unique @db.VarChar
  description          String?
  hitDice              String?                @db.VarChar
  ClassFeature         ClassFeature[]
  PlayerCharacterClass PlayerCharacterClass[]
  SubClass             SubClass[]
}

model ClassFeature {
  id             String    @id @db.Uuid
  name           String?   @unique @db.VarChar
  level          Int?
  base_class_id  String?   @db.Uuid
  SubClass_id    String?   @db.Uuid
  type           String?   @db.VarChar
  description    String?
  max_uses       Int?
  refresh_period String?   @db.VarChar
  SubClass       SubClass? @relation(fields: [SubClass_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Class          Class?    @relation(fields: [base_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Condition {
  id                       String                     @id @db.Uuid
  name                     String?                    @db.VarChar
  description              String?
  PlayerCharacterCondition PlayerCharacterCondition[]
}

model Currency {
  id                      String                    @id @db.Uuid
  name                    String?                   @db.VarChar
  denomination            Int?
  PlayerCharacterCurrency PlayerCharacterCurrency[]
}

model ExhaustionLevel {
  level           Int               @id
  effect          String?
  PlayerCharacter PlayerCharacter[]
}

model Inventory {
  id       String  @id @db.Uuid
  name     String? @db.VarChar
  capacity Int?
  type     String? @db.VarChar
}

model InventoryItem {
  id           String  @id @db.Uuid
  inventory_id String? @db.Uuid
  item_type    String? @db.VarChar
  item_id      String? @db.Uuid
  quantity     Int?
}

model Languages {
  id   String  @id @db.Uuid
  name String? @db.VarChar
}

model MagicItem {
  id                  String   @id @db.Uuid
  item_type           String?  @db.VarChar
  item_id             String?  @db.Uuid
  requires_attunement Boolean?
  Weapon              Weapon   @relation(fields: [id], references: [magic_item_id], onDelete: NoAction, onUpdate: NoAction)
  Armor               Armor    @relation(fields: [id], references: [magic_item_id], onDelete: NoAction, onUpdate: NoAction, map: "MagicItem_id_fkey1")
}

model Material {
  id        String  @id @db.Uuid
  name      String? @db.VarChar
  item_id   String? @db.Uuid
  item_type String? @db.VarChar
}

model PlayerCharacter {
  id                          String                        @id @db.Uuid
  name                        String?                       @db.VarChar
  gender                      String?                       @db.VarChar
  alignment                   String?                       @db.VarChar
  player_id                   String?
  race_id                     String?                       @db.Uuid
  sub_race_id                 String?                       @db.Uuid
  max_hp                      Int?
  current_hp                  Int?
  temporary_hp                Int?
  death_save_successes        Int?
  death_save_failures         Int?
  darkvision_bright_ft        Int?
  darkvision_dim_ft           Int?
  walk_speed_ft               Int?
  fly_speed_ft                Int?
  climb_speed_ft              Int?
  swim_speed_ft               Int?
  exhaustion_level            Int?
  AttunedItems                AttunedItems[]
  ExhaustionLevel             ExhaustionLevel?              @relation(fields: [exhaustion_level], references: [level], onDelete: NoAction, onUpdate: NoAction)
  User                        User?                         @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PlayerCharacterAbilityScore PlayerCharacterAbilityScore[]
  PlayerCharacterBackground   PlayerCharacterBackground[]
  PlayerCharacterClass        PlayerCharacterClass[]
  PlayerCharacterCondition    PlayerCharacterCondition[]
  PlayerCharacterCurrency     PlayerCharacterCurrency[]
  PlayerCharacterFeature      PlayerCharacterFeature[]
  PlayerCharacterInventory    PlayerCharacterInventory[]
  PlayerCharacterSkill        PlayerCharacterSkill[]
}

model PlayerCharacterAbilityScore {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  ability_id          String?          @db.Uuid
  score               Int?
  proficient          Boolean?
  Ability             Ability?         @relation(fields: [ability_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PlayerCharacterBackground {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  background_id       String?          @db.Uuid
  Background          Background?      @relation(fields: [background_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PlayerCharacterClass {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  class_id            String?          @db.Uuid
  SubClass_ud         String?          @db.Uuid
  SubClass            SubClass?        @relation(fields: [SubClass_ud], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Class               Class?           @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PlayerCharacterCondition {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  condition_id        String?          @db.Uuid
  Condition           Condition?       @relation(fields: [condition_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PlayerCharacterCurrency {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  currency_id         String?          @db.Uuid
  amount              Int?
  Currency            Currency?        @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PlayerCharacterFeature {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  feature_id          String?          @db.Uuid
  feature_type        String?          @db.VarChar
  uses_expended       Int?
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PlayerCharacterInventory {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  inventory_id        String?          @db.Uuid
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PlayerCharacterNote {
  id                  String  @id @db.Uuid
  player_character_id String? @db.Uuid
  name                String? @db.VarChar
  contents            String?
}

model PlayerCharacterProficiency {
  id          String  @id @db.Uuid
  name        String? @db.VarChar
  type        String? @db.VarChar
  type_id     String? @db.Uuid
  source_type String? @db.VarChar
  source_id   String? @db.Uuid
}

model PlayerCharacterSkill {
  id                  String           @id @db.Uuid
  player_character_id String?          @db.Uuid
  skill_id            String?          @db.Uuid
  proficient          Boolean?
  expert              Boolean?
  PlayerCharacter     PlayerCharacter? @relation(fields: [player_character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Skill               Skill?           @relation(fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PlayerCharacterSpell {
  id                              String   @id @db.Uuid
  player_character_spellcaster_id String?  @db.Uuid
  spell_id                        String?  @db.Uuid
  prepared                        Boolean?
}

model PlayerCharacterSpellSlot {
  id                              String  @id @db.Uuid
  player_character_spellcaster_id String? @db.Uuid
  level                           Int?
  max                             Int?
  expended                        Int?
}

model PlayerCharacterSpellcaster {
  id                                String  @id @db.Uuid
  player_character_id               String? @db.Uuid
  player_character_ability_score_id String? @db.Uuid
}

model Race {
  id          String        @id @db.Uuid
  name        String?       @db.VarChar
  description String?
  RaceFeature RaceFeature[]
  SubRace     SubRace[]
}

model RaceFeature {
  id             String   @id @db.Uuid
  name           String?  @unique @db.VarChar
  level          Int?
  race_id        String?  @db.Uuid
  sub_race_id    String?  @db.Uuid
  type           String?  @db.VarChar
  description    String?
  max_uses       Int?
  refresh_period String?  @db.VarChar
  Race           Race?    @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  SubRace        SubRace? @relation(fields: [sub_race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Skill {
  id                   String                 @id @db.Uuid
  name                 String?                @db.VarChar
  ability_id           String?                @db.Uuid
  PlayerCharacterSkill PlayerCharacterSkill[]
  Ability              Ability?               @relation(fields: [ability_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Spell {
  id          String   @id @db.Uuid
  name        String?  @db.VarChar
  description String?
  verbal      Boolean?
  somatic     Boolean?
  material    Boolean?
}

model SpellMaterial {
  id          String  @id @db.Uuid
  spell_id    String? @db.Uuid
  material_id String? @db.Uuid
  amount      Int?
}

model SubClass {
  id                   String                 @id @db.Uuid
  name                 String?                @unique @db.VarChar
  slug                 String?                @unique @db.VarChar
  min_level            Int?
  description          String?
  base_class_id        String?                @db.Uuid
  ClassFeature         ClassFeature[]
  PlayerCharacterClass PlayerCharacterClass[]
  Class                Class?                 @relation(fields: [base_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SubRace {
  id          String        @id @db.Uuid
  name        String?       @db.VarChar
  description String?
  race_id     String?       @db.Uuid
  RaceFeature RaceFeature[]
  Race        Race?         @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Weapon {
  id             String           @id @db.Uuid
  name           String?          @unique @db.VarChar
  description    String?
  range_ft       Int?
  long_range_ft  Int?
  hit_bonus      Int?
  magic_item_id  String?          @unique @db.Uuid
  MagicItem      MagicItem?
  WeaponDamage   WeaponDamage[]
  WeaponProperty WeaponProperty[]
}

model WeaponDamage {
  id        String  @id @db.Uuid
  weapon_id String? @db.Uuid
  dice      String? @db.VarChar
  bonus     Int?
  type      String? @db.VarChar
  Weapon    Weapon? @relation(fields: [weapon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model WeaponProperty {
  id        String  @id @db.Uuid
  weapon_id String? @db.Uuid
  value     String? @db.VarChar
  Weapon    Weapon? @relation(fields: [weapon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
